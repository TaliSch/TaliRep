@{
    ViewBag.Title = "post editor";
}

<style>
    textarea {
        width: 100%;
        min-width:100%;
        max-width:100% !important;
        height: 400px;
        min-height:90% !important;
        max-height:100% !important;
       -webkit-box-sizing:border-box;
        -moz-box-sizing:border-box;
        box-sizing:border-box;
        border-style:solid;
        border-width:thick;
        border-color:red;
        background-color:yellow;
        resize:none;

    }

    .wrapper {
        width:100%;
        height:400px;
        border-style:solid;
        border-width:thick;
    }
    #editor-container {
        border: thick solid red;
         width:100%;
        height:500px;
    }
    #editor-container {
        border: thick solid green;
        width:100%;
        height:100px;
    }
    #id5 {
        font-size:16px;
    }

</style>
<script>
    
    //$.Class.extend('SpanTree',
    //{
    //    init: function( from1, length, from2, id ) {
    //        // saves name on the monster instance
    //        this.from1 = from1;
    //        this.length = length;
    //        this.from2 = from2;// from2 length is a constant:7
    //        this.id = id;
    //        this.children=[];
    //    }
    //});
    //function SortSpantrees(o1, o2){
    //    return o1.from2 - o2.from2;
       
    //}


    //$.Class.extend('SpanIndexesCalculator',
    //{
    //    init: function () {
    //        this.indexes = [];
    //        this.length2=7;//"</span>"
    //    },
    //    from from1 to to1
    //    Add: function(from, to, spanText) { 
    //        // 1. calculate [from,to] in the html
    //        //$(this.indexses).each(
    //        var sum = 0;
    //        var calculatedFrom = from;
    //        var calculatedTo = to;
    //        for (var i = 0; i < this.indexes.length ; i++) {
    //            var spanIndexes = his.indexes[i];
    //            if (spanIndexes.from1 < from || spanIndexes.from1 < to) {
    //                calculatedFrom += spanIndexes.length;
    //                calculatedTo += spanIndexes.length;
    //            }
    //        }
    //        // find out which parent contains all/part of the selection
            

    //        // calculate new indexes for the rest of the elements

    //        // keep the array sorted TODO:list
    //        this.indexes.sort(function(a, b) {
    //            return a.from1-b.from1;
    //        });
    //    }


    //});

    
    $(document).ready(function () {
        var currId = 0;
        $('#chooseColor').click(function (event) {
            event.preventDefault();
            //getSel();
            //alert('onclick');
            changeHtml('color:green');
        })
        function replace() {
            var selection = window.getSelection();
            var text = selection.toString();
            var parent = $(selection.focusNode.parentElement);
            var oldHtml = parent.html();
            var newHtml = oldHtml.replace(text, "<span class='highlight'>" + text + "</span>");
            parent.html(newHtml);
        }

        function getSel() {
            alert('in getsel');
            // obtain the object reference for the <textarea>
            var txtarea = document.getElementById("user-input");
            // obtain the index of the first selected character
            var start = txtarea.selectionStart;
            // obtain the index of the last selected character
            var finish = txtarea.selectionEnd;
            // obtain the selected text
            var sel = txtarea.value.substring(start, finish);
            // do something with the selected content
            alert(sel);
        }

        //function getSelectionParents() {
        //    var parents = [];
        //    var selection = window.getSelection();
        //    var parentStart = selection.getRangeAt(0).commonAncestorContainer;
        //    parentStart.
        //    var parentEnd = $(selection[selection.].focusNode.parentElement);
        //    if (parentStart 
        //}

        function appendStye(styleAttr) {
            range = document.createRange();
            newNode = document.createElement("p");
            newNode.appendChild(document.createTextNode("New Node Inserted Here"));
            range.selectNode(document.getElementsByTagName("div").item(0));
            range.insertNode(newNode);
        }
        
        function containsNode(nodeToFind, node) {
            var found = false;
            if (node == nodeToFind)
                return true;
            var children = node.childNodes;
        
            for (var i = 0; i < children.length ; i++) {
                if (containsNode(nodeToFind, children.item(i))) {
                    found = true;
                    break;
                }
            }

            return found;
        }
        
        

        function changeHtml(style) {
            //var element = document.getElementById("id4");
            alert(style);
           // alert(element.innerText);
            //alert(element.innerHTML);
           // alert(element.outerText);
            //alert(element.outerHTML);
           
            var selection = window.getSelection();//$.Range.current();//   
            var startNode = selection.anchorNode;
            //alert(startNode.textContent);
            var endNode = selection.focusNode;

            var prefix = "<span style=\'" + style + '\'>';
          //  alert(prefix);
            var sufix = '</span>';
        //    alert(sufix);

            var startOffset = selection.anchorOffset;
        //    alert(startOffset);
            var endOffset = selection.focusOffset;

            if (startNode != endNode) {
                var parentNode = selection.getRangeAt(0).commonAncestorContainer;
                alert(containsNode(startNode, parentNode));
                //var children = parentNode.childNodes;
                //alert(children.length);
                //for (var i = 0; i < children.length ; i++) {
                //    var child = children.item(i);
                //    child.
                //}

                //var idStart = startNode.parentNode.attributes['id'];
                //var idEnd = endNode.parentNode.attributes['id'];
                //var idParent = parent.attributes['id'];
            
                var newString = prefix + startNode.textContent.substring(startOffset, startNode.textContent.length) + sufix;
                var $newNode = $(newString);
                alert(newString);
                alert($newNode);
                $(startNode).replaceWith($newNode);

                var startElement = startNode.parentNode;//document.getElementById(idStart);
                //startElement.replaceChild($newNode, startNode);
                alert(startElement.innerHTML);

             //   alert(startElement.textContent);
           //     var searchString = '>' + startNode.textContent + '<';
           //     alert(searchString);
           //     var oldHtml = startElement.innerHTML;
           //   //  alert(oldHtml);
           //     var index = oldHtml.lastIndexOf(searchString);
           //     if (index < 0)
           //         index = oldHtml.lastIndexOf(searchString.substring(1, searchString.length));
           //     index += startOffset;
           // //    alert(index);
           //     var nextIndex = index + startNode.textContent.length - startOffset;
           ////     alert(nextIndex);
           //     alert(startNode.textContent.substring(startOffset, startNode.textContent.length));
                
           //     alert(newString);
           //     var newInnerhtml = oldHtml.substring(0, index - 1) + newString + oldHtml.substring(nextIndex, oldHtml.length);
           //     alert(newInnerhtml);
           //     startElement.innerHTML = newInnerhtml;


            }


            //alert(selection.getRangeAt(0));
            //var d = selection.getRangeAt(0).cloneContents();
            //for (var j = 0; j < d.childNodes.length ; j++)
            //    alert(d.childNodes.item(j).textContent);
            //if (startNode == endNode)
            //    alert('the same parent');
            //else {
            //    alert('complicated');
            //    while (startNode != endNode) {
            //        selection.getRangeAt(0).setStartAfter(startNode);
            //        //selection.Range.Sets('+' + selection.anchorOffset);
            //        startNode = selection.anchorNode;
            //        alert(startNode.textContent);
            //    }
            //}


            
            //startNode.parentNode.childNodes

            //var startOffset = selection.anchorOffset;
            //var endOffset = selection.focusOffset;

            //alert(selection.anchorNode.textContent);
            //alert(startOffset);
            //alert(selection.focusNode.textContent);
            //alert(endOffset);
            //alert(selection.getRangeAt(0));
            //alert(selection.getRangeAt(selection.rangeCount-1));
        }

        function getSelectionParentElement() {
            var parentEl = null, sel;
            if (window.getSelection) {
                sel = window.getSelection();
                if (sel.rangeCount) {
                    parentEl = sel.getRangeAt(0).commonAncestorContainer;
                    if (parentEl.nodeType != 1) {
                        parentEl = parentEl.parentNode;
                    }
                }
            } else if ((sel = document.selection) && sel.type != "Control") {
                parentEl = sel.createRange().parentElement();
            }
            return parentEl;
        }
    })
</script>
<h2>Post Editor</h2>

<div id="editor-container">
<div id ="editor-commands-container">
    <div class="button">
        <input type="color" value="choose" tabindex="6" id="chooseColor"/>
    </div>
</div>
<div class="editor-field">
    <input type="text" id ="headerInput" value="header"/>
</div>
    tttt<span id="id4" style='color:red'>the<span id="id5" style='color:yellow'>re</span>blabla</span>yyy
<div class="wrapper">
    <div class="editor-multiline-field">
        <textarea id="user-input">
        </textarea>
    </div>
</div>
</div>

